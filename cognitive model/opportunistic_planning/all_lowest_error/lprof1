Timer unit: 1e-06 s

Total time: 1289.9 s
File: /home/zauri/files/anaconda3/lib/python3.7/site-packages/opportunistic_planning/predict_sequence.py
Function: predict_sequence at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           def predict_sequence(objects, coordinates, start_coordinates, c, k, dimension=[3, ]):
     7                                               ''' Predicts sequence based on required objects, object coordinates, start coordinates of subject,
     8                                                   parameters (c+k) and dimensionality.
     9                                                   Input: Objects, object coordinates, start coordinates, c, k, dimension
    10                                                   Output: Sequence of objects as str
    11                                               '''
    12                                               
    13    952560    2039244.0      2.1      0.2      prediction = []
    14    952560    2833486.0      3.0      0.2      possible_items = dict.fromkeys(objects, 0)  # generate dict from object list
    15    952560    1534230.0      1.6      0.1      coord_index = 0
    16    952560    1497578.0      1.6      0.1      start_coords = start_coordinates
    17    952560    1452262.0      1.5      0.1      coords = coordinates
    18    952560    1508763.0      1.6      0.1      new_coords = {}
    19    952560    1495909.0      1.6      0.1      new_start_coords = []
    20                                           
    21    952560    1673939.0      1.8      0.1      if dimension[0] == 3:  # no changes if 3D
    22    136080     218749.0      1.6      0.0          new_coords = coords
    23    136080     221026.0      1.6      0.0          new_start_coords = start_coords
    24                                           
    25    816480    1305036.0      1.6      0.1      elif dimension[0] == 2:  # 2D: remove obsolete coordinate
    26    408240     676474.0      1.7      0.1          if dimension[1] == 'xy':
    27    136080     719849.0      5.3      0.1              new_coords = {key: value[:-1] for key, value in coords.items()}
    28    136080     658621.0      4.8      0.1              new_start_coords = [x[:-1] for x in start_coords]
    29                                           
    30    272160     433562.0      1.6      0.0          elif dimension[1] == 'xz':
    31    136080     679124.0      5.0      0.1              new_start_coords = [[x[0], x[-1]] for x in start_coords]
    32                                           
    33   1139670    1873105.0      1.6      0.1              for key, value in coords.items():
    34   1003590    1612241.0      1.6      0.1                  new_value = (value[0], value[-1])
    35   1003590    1615125.0      1.6      0.1                  new_coords[key] = new_value
    36                                           
    37    136080     219720.0      1.6      0.0          elif dimension[1] == 'yz':
    38    136080     694963.0      5.1      0.1              new_coords = {key: value[1:] for key, value in coords.items()}
    39    136080     633235.0      4.7      0.0              new_start_coords = [x[1:] for x in start_coords]
    40                                           
    41    408240     670127.0      1.6      0.1      elif dimension[0] == 1:  # 1D: choose appropriate coordinate
    42    408240     681852.0      1.7      0.1          if dimension[1] == 'x':
    43    136080     577447.0      4.2      0.0              new_coords = {key: value[0] for key, value in coords.items()}
    44    136080     519214.0      3.8      0.0              new_start_coords = [x[0] for x in start_coords]
    45                                           
    46    272160     439002.0      1.6      0.0          elif dimension[1] == 'y':
    47    136080     597453.0      4.4      0.0              new_coords = {key: value[1] for key, value in coords.items()}
    48    136080     526107.0      3.9      0.0              new_start_coords = [x[1] for x in start_coords]
    49                                           
    50    136080     221133.0      1.6      0.0          elif dimension[1] == 'z':
    51    136080     605707.0      4.5      0.0              new_coords = {key: value[2] for key, value in coords.items()}
    52    136080     517122.0      3.8      0.0              new_start_coords = [x[2] for x in start_coords]
    53                                           
    54   7750890   14370001.0      1.9      1.1      while bool(possible_items) == True:  # while dict not empty
    55  35902440   60660798.0      1.7      4.7          for obj in possible_items.keys():
    56                                                       # calculate euclidean distance between current location and items
    57  29104110   47655011.0      1.6      3.7              possible_items[obj] = ((distance.euclidean(
    58  29104110   46668744.0      1.6      3.6                  new_start_coords[coord_index],
    59  29104110  901395822.0     31.0     69.9                  new_coords[obj])
    60  29104110   74108977.0      2.5      5.7                                     ) ** k[obj]) * c[obj]
    61                                           
    62   6798330   16246859.0      2.4      1.3          minval = min(possible_items.values())
    63   6798330   23172746.0      3.4      1.8          minval = [k for k, v in possible_items.items() if v == minval]
    64   6798330   38046172.0      5.6      2.9          minval = random.choice(minval)  # choose prediction randomly if multiple items have same cost
    65   6798330   11685326.0      1.7      0.9          prediction.append(minval)
    66   6798330   12232616.0      1.8      0.9          del possible_items[minval]
    67   6798330   11238023.0      1.7      0.9          coord_index += 1
    68                                           
    69    952560    1464384.0      1.5      0.1      return prediction
